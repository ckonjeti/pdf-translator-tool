# Railway Deployment Dockerfile for Sanskrit Translator
# Multi-stage build for optimal performance on Railway

# Stage 1: Build stage
FROM node:18-alpine AS builder

# Install build dependencies including canvas requirements
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    jpeg-dev \
    cairo-dev \
    giflib-dev \
    pango-dev \
    libtool \
    autoconf \
    automake \
    pkgconfig \
    pixman-dev \
    build-base \
    libpng-dev \
    freetype-dev \
    fontconfig-dev \
    ttf-dejavu \
    ttf-liberation \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files first for better Docker layer caching
COPY package.json.railway ./package.json
COPY client/package*.json ./client/

# Install dependencies (use npm install since we're using custom package.json)
RUN npm install --legacy-peer-deps --no-optional
RUN cd client && npm install --legacy-peer-deps --no-optional

# Copy source code
COPY . .

# Build the React app
RUN npm run build

# Stage 2: Production stage
FROM node:18-alpine AS production

# Install runtime dependencies only
RUN apk add --no-cache \
    cairo \
    jpeg \
    pango \
    giflib \
    pixman \
    libpng \
    freetype \
    fontconfig \
    ttf-dejavu \
    ttf-liberation \
    && rm -rf /var/cache/apk/*

# Create app directory
WORKDIR /app

# Copy package.json and install production dependencies
COPY package.json.railway ./package.json
RUN npm install --only=production --legacy-peer-deps --no-optional

# Copy built application from builder stage
COPY --from=builder /app/client/build ./client/build
COPY --from=builder /app/server.js ./
COPY --from=builder /app/*.traineddata ./

# Create necessary directories with proper permissions
RUN mkdir -p uploads/images

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

# Change ownership of the app directory
RUN chown -R nodejs:nodejs /app && \
    chmod -R 755 /app

# Switch to non-root user
USER nodejs

# Expose port (Railway automatically sets PORT environment variable)
EXPOSE $PORT

# Health check for Railway monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD node -e "require('http').get('http://localhost:' + (process.env.PORT || 5000) + '/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Start the application
CMD ["node", "server.js"] 